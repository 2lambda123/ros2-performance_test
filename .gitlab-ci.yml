stages:
  - build
  - test
  - deploy

build_cross_image:
  stage: build
  image: docker
  services:
    - docker:dind
  script:
    - '
      apt-get update && apt-get install -y
          qemu-user-static
      '
    - docker build --build-arg PERFORMANCE_TEST_DOCKER_ARCH=arm64v8 --build-arg PERFORMANCE_TEST_TARGET_ARCH=aarch64 -t performance_test_cross -f tools/Dockerimage.crossbuild .
    - '
      docker run -t -v `pwd`:`pwd` -w `pwd`
          --rm performance_test_cross
          sh -c "colcon build --merge-install --cmake-args -DCMAKE_TOOLCHAIN_FILE=`pwd`/tools/toolchain.cmake -DBUILD_TESTING=OFF"
      '

build_cyclonedds:
  stage: build
  image: osrf/ros:dashing-desktop
  script:
    - source /opt/ros/dashing/setup.bash
    - rosdep update
    - apt-get update
    - rosdep install --from performance_test --ignore-src -y
    - pip3 install -U colcon-common-extensions pytest
    - git clone https://github.com/eclipse-cyclonedds/cyclonedds.git
    - cd cyclonedds
    - git checkout 4e805597631ed0dcbdc0eecfe9d532cb75180ae7 # Head as of 20190725
    - mkdir -p build
    - cd build
    - cmake -DCMAKE_INSTALL_PREFIX=/opt/cyclonedds ../src
    - cmake --build .
    - sudo cmake --build . --target install
    - find /opt/cyclonedds
    - cd $CI_PROJECT_DIR
    - mkdir -p /opt/performance_test
    - '
      colcon build
          --install-base /opt/performance_test
          --merge-install
          --cmake-args
            -DCMAKE_BUILD_TYPE=Release
            -DPERFORMANCE_TEST_FORCE_CYCLONEDDS=BOOL:ON
          --base-path performance_test
      '
    - cp LICENSE /opt/performance_test
    - tar cfz opt.tar.gz /opt/performance_test
  artifacts:
    expire_in: 1 day
    when: always
    paths:
      - log
      - build
      - opt.tar.gz

build_opendds:
  stage: build
  image: osrf/ros:dashing-desktop
  script:
    - source /opt/ros/dashing/setup.bash
    - apt-get update
    - '
      apt-get install -y
          ros-dashing-osrf-testing-tools-cpp
          default-jdk
          wget
      '
    - pip3 install -U colcon-common-extensions pytest
    - cd /opt
    - wget https://s3-us-west-2.amazonaws.com/public.apex.ai/opendds.tar.gz
    - tar -xzf opendds.tar.gz
    - find /opt/opendds
    - cd $CI_PROJECT_DIR
    - mkdir -p /opt/performance_test
    - '
      colcon build
          --install-base /opt/performance_test
          --merge-install
          --cmake-args
            -DCMAKE_BUILD_TYPE=Release
            -DPERFORMANCE_TEST_OPENDDS_ENABLED=ON
          --base-path performance_test
      '
    - cp LICENSE /opt/performance_test
    - tar cfz opt.tar.gz /opt/performance_test
  artifacts:
    expire_in: 1 day
    when: always
    paths:
    - log
    - build
    - opt.tar.gz

build_fastrtps:
  stage: build
  image: osrf/ros:dashing-desktop
  script:
    - apt-get update
    - '
      apt-get install -y
          ros-dashing-osrf-testing-tools-cpp
          default-jdk
          maven
      '
    - '
      colcon build
          --install-base /opt/performance_test
          --merge-install
          --cmake-args
            -DCMAKE_BUILD_TYPE=Release
            -DPERFORMANCE_TEST_FASTRTPS_ENABLED=ON
      '
    - cp LICENSE /opt/performance_test
    - tar cfz opt.tar.gz /opt/performance_test
  artifacts:
    expire_in: 1 day
    when: always
    paths:
      - log
      - build
      - opt.tar.gz


build_ros1:
  stage: build
  image: osrf/ros:melodic-desktop
  script:
    - source /opt/ros/melodic/setup.bash
    - apt-get update
    - apt-get install -y python3-colcon-common-extensions
    - touch performance_test/COLCON_IGNORE  # Don't build the ROS2 package
    - rm performance_test_ros1_msgs/COLCON_IGNORE  # ROS1 packages are ignored by default
    - rm performance_test_ros1_publisher/COLCON_IGNORE  # ROS1 packages are ignored by default
    - colcon build  # Should build msgs and publisher


test:
  stage: test
  image: osrf/ros:dashing-desktop
  dependencies:
    - build_cyclonedds
  script:
    - tar xf opt.tar.gz -C /
    - '
      colcon test
          --install-base /opt/performance_test
          --merge-install
          --base-path performance_test
      '
    - 'colcon test-result --verbose'
  artifacts:
    expire_in: 1 day
    when: always
    paths:
      - log


test_security:
  stage: test
  image: osrf/ros:dashing-desktop
  dependencies:
    - build_fastrtps
  before_script:
    - apt-get update
    - apt-get install -y ros-dashing-osrf-testing-tools-cpp
  script:
    - tar xzf opt.tar.gz -C /
    - source /opt/performance_test/setup.bash
    # Enable security
    - cd performance_test/helper_scripts
    - source security_setup.bash enable ./demo_keys
    # The below runs should fail:
    # Unexpected node names:
    - '! ros2 run performance_test perf_test -c ROS2 -t Array1k --max_runtime 10 --rate 2 --keep_last --history_depth 10'
    # Unexpected topic names
    - '! ros2 run performance_test perf_test -c ROS2 -t Struct16 --max_runtime 10 --rate 2 --keep_last --history_depth 10 --with_security'
    # This should pass (time-out)
    - 'timeout 30 ros2 run performance_test perf_test -c ROS2 -t Array1k --rate 2 --keep_last --history_depth 10 --with_security ||
       if [ $? -eq 124 ]; then echo "OK";
       else exit 1;
       fi
      '

volume:
  stage: deploy
  image: docker
  services:
    - docker:dind
  dependencies:
    - build_cyclonedds
  before_script:
    - ''
  script:
    - 'echo -e "*\n!opt.tar.gz" > .dockerignore'
    - |
      cat >Dockerfile <<EOF
      FROM alpine
      ADD opt.tar.gz /
      VOLUME /opt/performance_test
      CMD ["/bin/sh", "-c", "trap 'exit 147' TERM; tail -f /dev/null & wait ${!}"]
      EOF
    - '
      docker build
          --label ade_image_commit_sha="$CI_COMMIT_SHA"
          --label ade_image_commit_tag="$CI_COMMIT_TAG"
          -t image .
      '
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker tag image $CI_REGISTRY_IMAGE:commit-$CI_COMMIT_SHA
    - docker tag image $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    - docker push $CI_REGISTRY_IMAGE:commit-$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
