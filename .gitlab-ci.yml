stages:
  - build
  - test
  - deploy

before_script:
  - source /opt/ros/dashing/setup.bash
  - apt-get update
  - '
    apt-get install -y
        ros-dashing-osrf-testing-tools-cpp
        default-jre
    '
  - pip3 install -U colcon-common-extensions pytest

build_cross_image:
  stage: build
  image: osrf/ros:dashing-desktop
  script:
    - '
      apt-get update && apt-get install -y --no-install-recommends
          qemu-user-static
          apt-transport-https
          ca-certificates
          curl
          software-properties-common
      '
    - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
    - '
      add-apt-repository
          "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
      '
    - apt-get install -y --no-install-recommends docker-ce
    - docker build --build-arg PERFORMANCE_TEST_DOCKER_ARCH=arm64v8 --build-arg PERFORMANCE_TEST_TARGET_ARCH=aarch64 -t performance_test_cross -f tools/Dockerimage.crossbuild .
    - docker run -t -v `pwd`:`pwd` -w `pwd` \
          --rm performance_test_cross \
          sh -c "colcon build --merge-install --cmake-args -DCMAKE_TOOLCHAIN_FILE=`pwd`/tools/toolchain.cmake -DBUILD_TESTING=OFF"

build:
  stage: build
  image: osrf/ros:dashing-desktop
  script:
    - mkdir -p /opt/performance_test
    - '
      colcon build
          --install-base /opt/performance_test
          --merge-install
          --cmake-args
            -DCMAKE_BUILD_TYPE=Release
          --base-path performance_test
      '
    - cp LICENSE /opt/performance_test
    - tar cfz opt.tar.gz /opt/performance_test
  artifacts:
    expire_in: 1 day
    when: always
    paths:
      - log
      - build
      - opt.tar.gz


test:
  stage: test
  image: osrf/ros:dashing-desktop
  dependencies:
    - build
  script:
    - tar xf opt.tar.gz -C /
    - '
      colcon test
          --install-base /opt/performance_test
          --merge-install
          --base-path performance_test
      '
    - 'colcon test-result --verbose'
  artifacts:
    expire_in: 1 day
    when: always
    paths:
      - log

volume:
  stage: deploy
  image: docker
  services:
    - docker:dind
  dependencies:
    - build
  before_script:
    - ''
  script:
    - 'echo -e "*\n!opt.tar.gz" > .dockerignore'
    - |
      cat >Dockerfile <<EOF
      FROM alpine
      ADD opt.tar.gz /
      VOLUME /opt/performance_test
      CMD ["/bin/sh", "-c", "trap 'exit 147' TERM; tail -f /dev/null & wait ${!}"]
      EOF
    - '
      docker build
          --label ade_image_commit_sha="$CI_COMMIT_SHA"
          --label ade_image_commit_tag="$CI_COMMIT_TAG"
          -t image .
      '
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker tag image $CI_REGISTRY_IMAGE:commit-$CI_COMMIT_SHA
    - docker tag image $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    - docker push $CI_REGISTRY_IMAGE:commit-$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
